#pragma once
#include <dynalizer/dynalizer.hpp>
#include <lilv-0/lilv/lilv.h>
#include <stdexcept>

#define LILV_WRAP_INIT(Fun)                                   \
m_sym_ ## Fun = m_lib.symbol<decltype(::Fun)*>(# Fun);           \
if(!m_sym_ ## Fun)                                               \
    throw std::runtime_error("Invalid symbol lookup: Fun");

#define LILV_WRAP_FUNCTION(Fun, PrettyFun)                    \
public:                                                          \
template<typename... Args>                                       \
auto PrettyFun(Args&&... args) -> decltype(auto)                 \
{                                                                \
  return m_sym_ ## Fun(std::forward<Args>(args)...);             \
}                                                                \
private:                                                         \
  decltype(::Fun)* m_sym_ ## Fun{};


class lilv
{
public:
  explicit lilv(const char* filepath)
    : m_lib{filepath}
  {
  
  LILV_WRAP_INIT(lilv_free)
  LILV_WRAP_INIT(lilv_uri_to_path)
  LILV_WRAP_INIT(lilv_file_uri_parse)
  LILV_WRAP_INIT(lilv_new_uri)
  LILV_WRAP_INIT(lilv_new_file_uri)
  LILV_WRAP_INIT(lilv_new_string)
  LILV_WRAP_INIT(lilv_new_int)
  LILV_WRAP_INIT(lilv_new_float)
  LILV_WRAP_INIT(lilv_new_bool)
  LILV_WRAP_INIT(lilv_node_free)
  LILV_WRAP_INIT(lilv_node_duplicate)
  LILV_WRAP_INIT(lilv_node_equals)
  LILV_WRAP_INIT(lilv_node_get_turtle_token)
  LILV_WRAP_INIT(lilv_node_is_uri)
  LILV_WRAP_INIT(lilv_node_as_uri)
  LILV_WRAP_INIT(lilv_node_is_blank)
  LILV_WRAP_INIT(lilv_node_as_blank)
  LILV_WRAP_INIT(lilv_node_is_literal)
  LILV_WRAP_INIT(lilv_node_is_string)
  LILV_WRAP_INIT(lilv_node_as_string)
  LILV_WRAP_INIT(lilv_node_get_path)
  LILV_WRAP_INIT(lilv_node_is_float)
  LILV_WRAP_INIT(lilv_node_as_float)
  LILV_WRAP_INIT(lilv_node_is_int)
  LILV_WRAP_INIT(lilv_node_as_int)
  LILV_WRAP_INIT(lilv_node_is_bool)
  LILV_WRAP_INIT(lilv_node_as_bool)
  LILV_WRAP_INIT(lilv_plugin_classes_free)
  LILV_WRAP_INIT(lilv_plugin_classes_size)
  LILV_WRAP_INIT(lilv_plugin_classes_begin)
  LILV_WRAP_INIT(lilv_plugin_classes_get)
  LILV_WRAP_INIT(lilv_plugin_classes_next)
  LILV_WRAP_INIT(lilv_plugin_classes_is_end)
  LILV_WRAP_INIT(lilv_plugin_classes_get_by_uri)
  LILV_WRAP_INIT(lilv_scale_points_free)
  LILV_WRAP_INIT(lilv_scale_points_size)
  LILV_WRAP_INIT(lilv_scale_points_begin)
  LILV_WRAP_INIT(lilv_scale_points_get)
  LILV_WRAP_INIT(lilv_scale_points_next)
  LILV_WRAP_INIT(lilv_scale_points_is_end)
  LILV_WRAP_INIT(lilv_uis_free)
  LILV_WRAP_INIT(lilv_uis_size)
  LILV_WRAP_INIT(lilv_uis_begin)
  LILV_WRAP_INIT(lilv_uis_get)
  LILV_WRAP_INIT(lilv_uis_next)
  LILV_WRAP_INIT(lilv_uis_is_end)
  LILV_WRAP_INIT(lilv_uis_get_by_uri)
  LILV_WRAP_INIT(lilv_nodes_free)
  LILV_WRAP_INIT(lilv_nodes_size)
  LILV_WRAP_INIT(lilv_nodes_begin)
  LILV_WRAP_INIT(lilv_nodes_get)
  LILV_WRAP_INIT(lilv_nodes_next)
  LILV_WRAP_INIT(lilv_nodes_is_end)
  LILV_WRAP_INIT(lilv_nodes_get_first)
  LILV_WRAP_INIT(lilv_nodes_contains)
  LILV_WRAP_INIT(lilv_nodes_merge)
  LILV_WRAP_INIT(lilv_plugins_size)
  LILV_WRAP_INIT(lilv_plugins_begin)
  LILV_WRAP_INIT(lilv_plugins_get)
  LILV_WRAP_INIT(lilv_plugins_next)
  LILV_WRAP_INIT(lilv_plugins_is_end)
  LILV_WRAP_INIT(lilv_plugins_get_by_uri)
  LILV_WRAP_INIT(lilv_world_new)
  LILV_WRAP_INIT(lilv_world_set_option)
  LILV_WRAP_INIT(lilv_world_free)
  LILV_WRAP_INIT(lilv_world_load_all)
  LILV_WRAP_INIT(lilv_world_load_bundle)
  LILV_WRAP_INIT(lilv_world_load_specifications)
  LILV_WRAP_INIT(lilv_world_load_plugin_classes)
  LILV_WRAP_INIT(lilv_world_unload_bundle)
  LILV_WRAP_INIT(lilv_world_load_resource)
  LILV_WRAP_INIT(lilv_world_unload_resource)
  LILV_WRAP_INIT(lilv_world_get_plugin_class)
  LILV_WRAP_INIT(lilv_world_get_plugin_classes)
  LILV_WRAP_INIT(lilv_world_get_all_plugins)
  LILV_WRAP_INIT(lilv_world_find_nodes)
  LILV_WRAP_INIT(lilv_world_get)
  LILV_WRAP_INIT(lilv_world_ask)
  LILV_WRAP_INIT(lilv_world_get_symbol)
  LILV_WRAP_INIT(lilv_plugin_verify)
  LILV_WRAP_INIT(lilv_plugin_get_uri)
  LILV_WRAP_INIT(lilv_plugin_get_bundle_uri)
  LILV_WRAP_INIT(lilv_plugin_get_data_uris)
  LILV_WRAP_INIT(lilv_plugin_get_library_uri)
  LILV_WRAP_INIT(lilv_plugin_get_name)
  LILV_WRAP_INIT(lilv_plugin_get_class)
  LILV_WRAP_INIT(lilv_plugin_get_value)
  LILV_WRAP_INIT(lilv_plugin_has_feature)
  LILV_WRAP_INIT(lilv_plugin_get_supported_features)
  LILV_WRAP_INIT(lilv_plugin_get_required_features)
  LILV_WRAP_INIT(lilv_plugin_get_optional_features)
  LILV_WRAP_INIT(lilv_plugin_has_extension_data)
  LILV_WRAP_INIT(lilv_plugin_get_extension_data)
  LILV_WRAP_INIT(lilv_plugin_get_num_ports)
  LILV_WRAP_INIT(lilv_plugin_get_port_ranges_float)
  LILV_WRAP_INIT(lilv_plugin_get_num_ports_of_class)
  LILV_WRAP_INIT(lilv_plugin_get_num_ports_of_class_va)
  LILV_WRAP_INIT(lilv_plugin_has_latency)
  LILV_WRAP_INIT(lilv_plugin_get_latency_port_index)
  LILV_WRAP_INIT(lilv_plugin_get_port_by_index)
  LILV_WRAP_INIT(lilv_plugin_get_port_by_symbol)
  LILV_WRAP_INIT(lilv_plugin_get_port_by_designation)
  LILV_WRAP_INIT(lilv_plugin_get_project)
  LILV_WRAP_INIT(lilv_plugin_get_author_name)
  LILV_WRAP_INIT(lilv_plugin_get_author_email)
  LILV_WRAP_INIT(lilv_plugin_get_author_homepage)
  LILV_WRAP_INIT(lilv_plugin_is_replaced)
  LILV_WRAP_INIT(lilv_plugin_write_description)
  LILV_WRAP_INIT(lilv_plugin_write_manifest_entry)
  LILV_WRAP_INIT(lilv_plugin_get_related)
  LILV_WRAP_INIT(lilv_port_get_node)
  LILV_WRAP_INIT(lilv_port_get_value)
  LILV_WRAP_INIT(lilv_port_get)
  LILV_WRAP_INIT(lilv_port_get_properties)
  LILV_WRAP_INIT(lilv_port_has_property)
  LILV_WRAP_INIT(lilv_port_supports_event)
  LILV_WRAP_INIT(lilv_port_get_index)
  LILV_WRAP_INIT(lilv_port_get_symbol)
  LILV_WRAP_INIT(lilv_port_get_name)
  LILV_WRAP_INIT(lilv_port_get_classes)
  LILV_WRAP_INIT(lilv_port_is_a)
  LILV_WRAP_INIT(lilv_port_get_range)
  LILV_WRAP_INIT(lilv_port_get_scale_points)
  LILV_WRAP_INIT(lilv_state_new_from_world)
  LILV_WRAP_INIT(lilv_state_new_from_file)
  LILV_WRAP_INIT(lilv_state_new_from_string)
  LILV_WRAP_INIT(lilv_state_new_from_instance)
  LILV_WRAP_INIT(lilv_state_free)
  LILV_WRAP_INIT(lilv_state_equals)
  LILV_WRAP_INIT(lilv_state_get_num_properties)
  LILV_WRAP_INIT(lilv_state_get_plugin_uri)
  LILV_WRAP_INIT(lilv_state_get_uri)
  LILV_WRAP_INIT(lilv_state_get_label)
  LILV_WRAP_INIT(lilv_state_set_label)
  LILV_WRAP_INIT(lilv_state_set_metadata)
  LILV_WRAP_INIT(lilv_state_emit_port_values)
  LILV_WRAP_INIT(lilv_state_restore)
  LILV_WRAP_INIT(lilv_state_save)
  LILV_WRAP_INIT(lilv_state_to_string)
  LILV_WRAP_INIT(lilv_state_delete)
  LILV_WRAP_INIT(lilv_scale_point_get_label)
  LILV_WRAP_INIT(lilv_scale_point_get_value)
  LILV_WRAP_INIT(lilv_plugin_class_get_parent_uri)
  LILV_WRAP_INIT(lilv_plugin_class_get_uri)
  LILV_WRAP_INIT(lilv_plugin_class_get_label)
  LILV_WRAP_INIT(lilv_plugin_class_get_children)
  LILV_WRAP_INIT(lilv_plugin_instantiate)
  LILV_WRAP_INIT(lilv_instance_free)
  LILV_WRAP_INIT(lilv_instance_get_uri)
  LILV_WRAP_INIT(lilv_instance_connect_port)
  LILV_WRAP_INIT(lilv_instance_activate)
  LILV_WRAP_INIT(lilv_instance_run)
  LILV_WRAP_INIT(lilv_instance_deactivate)
  LILV_WRAP_INIT(lilv_instance_get_extension_data)
  LILV_WRAP_INIT(lilv_instance_get_descriptor)
  LILV_WRAP_INIT(lilv_instance_get_handle)
  LILV_WRAP_INIT(lilv_plugin_get_uis)
  LILV_WRAP_INIT(lilv_ui_get_uri)
  LILV_WRAP_INIT(lilv_ui_get_classes)
  LILV_WRAP_INIT(lilv_ui_is_a)
  LILV_WRAP_INIT(lilv_ui_is_supported)
  LILV_WRAP_INIT(lilv_ui_get_bundle_uri)
  LILV_WRAP_INIT(lilv_ui_get_binary_uri)

  }

  static auto& instance() {
    static lilv c;
    return c;
  }
  
  LILV_WRAP_FUNCTION(lilv_free, free)
  LILV_WRAP_FUNCTION(lilv_uri_to_path, uri_to_path)
  LILV_WRAP_FUNCTION(lilv_file_uri_parse, file_uri_parse)
  LILV_WRAP_FUNCTION(lilv_new_uri, new_uri)
  LILV_WRAP_FUNCTION(lilv_new_file_uri, new_file_uri)
  LILV_WRAP_FUNCTION(lilv_new_string, new_string)
  LILV_WRAP_FUNCTION(lilv_new_int, new_int)
  LILV_WRAP_FUNCTION(lilv_new_float, new_float)
  LILV_WRAP_FUNCTION(lilv_new_bool, new_bool)
  LILV_WRAP_FUNCTION(lilv_node_free, node_free)
  LILV_WRAP_FUNCTION(lilv_node_duplicate, node_duplicate)
  LILV_WRAP_FUNCTION(lilv_node_equals, node_equals)
  LILV_WRAP_FUNCTION(lilv_node_get_turtle_token, node_get_turtle_token)
  LILV_WRAP_FUNCTION(lilv_node_is_uri, node_is_uri)
  LILV_WRAP_FUNCTION(lilv_node_as_uri, node_as_uri)
  LILV_WRAP_FUNCTION(lilv_node_is_blank, node_is_blank)
  LILV_WRAP_FUNCTION(lilv_node_as_blank, node_as_blank)
  LILV_WRAP_FUNCTION(lilv_node_is_literal, node_is_literal)
  LILV_WRAP_FUNCTION(lilv_node_is_string, node_is_string)
  LILV_WRAP_FUNCTION(lilv_node_as_string, node_as_string)
  LILV_WRAP_FUNCTION(lilv_node_get_path, node_get_path)
  LILV_WRAP_FUNCTION(lilv_node_is_float, node_is_float)
  LILV_WRAP_FUNCTION(lilv_node_as_float, node_as_float)
  LILV_WRAP_FUNCTION(lilv_node_is_int, node_is_int)
  LILV_WRAP_FUNCTION(lilv_node_as_int, node_as_int)
  LILV_WRAP_FUNCTION(lilv_node_is_bool, node_is_bool)
  LILV_WRAP_FUNCTION(lilv_node_as_bool, node_as_bool)
  LILV_WRAP_FUNCTION(lilv_plugin_classes_free, plugin_classes_free)
  LILV_WRAP_FUNCTION(lilv_plugin_classes_size, plugin_classes_size)
  LILV_WRAP_FUNCTION(lilv_plugin_classes_begin, plugin_classes_begin)
  LILV_WRAP_FUNCTION(lilv_plugin_classes_get, plugin_classes_get)
  LILV_WRAP_FUNCTION(lilv_plugin_classes_next, plugin_classes_next)
  LILV_WRAP_FUNCTION(lilv_plugin_classes_is_end, plugin_classes_is_end)
  LILV_WRAP_FUNCTION(lilv_plugin_classes_get_by_uri, plugin_classes_get_by_uri)
  LILV_WRAP_FUNCTION(lilv_scale_points_free, scale_points_free)
  LILV_WRAP_FUNCTION(lilv_scale_points_size, scale_points_size)
  LILV_WRAP_FUNCTION(lilv_scale_points_begin, scale_points_begin)
  LILV_WRAP_FUNCTION(lilv_scale_points_get, scale_points_get)
  LILV_WRAP_FUNCTION(lilv_scale_points_next, scale_points_next)
  LILV_WRAP_FUNCTION(lilv_scale_points_is_end, scale_points_is_end)
  LILV_WRAP_FUNCTION(lilv_uis_free, uis_free)
  LILV_WRAP_FUNCTION(lilv_uis_size, uis_size)
  LILV_WRAP_FUNCTION(lilv_uis_begin, uis_begin)
  LILV_WRAP_FUNCTION(lilv_uis_get, uis_get)
  LILV_WRAP_FUNCTION(lilv_uis_next, uis_next)
  LILV_WRAP_FUNCTION(lilv_uis_is_end, uis_is_end)
  LILV_WRAP_FUNCTION(lilv_uis_get_by_uri, uis_get_by_uri)
  LILV_WRAP_FUNCTION(lilv_nodes_free, nodes_free)
  LILV_WRAP_FUNCTION(lilv_nodes_size, nodes_size)
  LILV_WRAP_FUNCTION(lilv_nodes_begin, nodes_begin)
  LILV_WRAP_FUNCTION(lilv_nodes_get, nodes_get)
  LILV_WRAP_FUNCTION(lilv_nodes_next, nodes_next)
  LILV_WRAP_FUNCTION(lilv_nodes_is_end, nodes_is_end)
  LILV_WRAP_FUNCTION(lilv_nodes_get_first, nodes_get_first)
  LILV_WRAP_FUNCTION(lilv_nodes_contains, nodes_contains)
  LILV_WRAP_FUNCTION(lilv_nodes_merge, nodes_merge)
  LILV_WRAP_FUNCTION(lilv_plugins_size, plugins_size)
  LILV_WRAP_FUNCTION(lilv_plugins_begin, plugins_begin)
  LILV_WRAP_FUNCTION(lilv_plugins_get, plugins_get)
  LILV_WRAP_FUNCTION(lilv_plugins_next, plugins_next)
  LILV_WRAP_FUNCTION(lilv_plugins_is_end, plugins_is_end)
  LILV_WRAP_FUNCTION(lilv_plugins_get_by_uri, plugins_get_by_uri)
  LILV_WRAP_FUNCTION(lilv_world_new, world_new)
  LILV_WRAP_FUNCTION(lilv_world_set_option, world_set_option)
  LILV_WRAP_FUNCTION(lilv_world_free, world_free)
  LILV_WRAP_FUNCTION(lilv_world_load_all, world_load_all)
  LILV_WRAP_FUNCTION(lilv_world_load_bundle, world_load_bundle)
  LILV_WRAP_FUNCTION(lilv_world_load_specifications, world_load_specifications)
  LILV_WRAP_FUNCTION(lilv_world_load_plugin_classes, world_load_plugin_classes)
  LILV_WRAP_FUNCTION(lilv_world_unload_bundle, world_unload_bundle)
  LILV_WRAP_FUNCTION(lilv_world_load_resource, world_load_resource)
  LILV_WRAP_FUNCTION(lilv_world_unload_resource, world_unload_resource)
  LILV_WRAP_FUNCTION(lilv_world_get_plugin_class, world_get_plugin_class)
  LILV_WRAP_FUNCTION(lilv_world_get_plugin_classes, world_get_plugin_classes)
  LILV_WRAP_FUNCTION(lilv_world_get_all_plugins, world_get_all_plugins)
  LILV_WRAP_FUNCTION(lilv_world_find_nodes, world_find_nodes)
  LILV_WRAP_FUNCTION(lilv_world_get, world_get)
  LILV_WRAP_FUNCTION(lilv_world_ask, world_ask)
  LILV_WRAP_FUNCTION(lilv_world_get_symbol, world_get_symbol)
  LILV_WRAP_FUNCTION(lilv_plugin_verify, plugin_verify)
  LILV_WRAP_FUNCTION(lilv_plugin_get_uri, plugin_get_uri)
  LILV_WRAP_FUNCTION(lilv_plugin_get_bundle_uri, plugin_get_bundle_uri)
  LILV_WRAP_FUNCTION(lilv_plugin_get_data_uris, plugin_get_data_uris)
  LILV_WRAP_FUNCTION(lilv_plugin_get_library_uri, plugin_get_library_uri)
  LILV_WRAP_FUNCTION(lilv_plugin_get_name, plugin_get_name)
  LILV_WRAP_FUNCTION(lilv_plugin_get_class, plugin_get_class)
  LILV_WRAP_FUNCTION(lilv_plugin_get_value, plugin_get_value)
  LILV_WRAP_FUNCTION(lilv_plugin_has_feature, plugin_has_feature)
  LILV_WRAP_FUNCTION(lilv_plugin_get_supported_features, plugin_get_supported_features)
  LILV_WRAP_FUNCTION(lilv_plugin_get_required_features, plugin_get_required_features)
  LILV_WRAP_FUNCTION(lilv_plugin_get_optional_features, plugin_get_optional_features)
  LILV_WRAP_FUNCTION(lilv_plugin_has_extension_data, plugin_has_extension_data)
  LILV_WRAP_FUNCTION(lilv_plugin_get_extension_data, plugin_get_extension_data)
  LILV_WRAP_FUNCTION(lilv_plugin_get_num_ports, plugin_get_num_ports)
  LILV_WRAP_FUNCTION(lilv_plugin_get_port_ranges_float, plugin_get_port_ranges_float)
  LILV_WRAP_FUNCTION(lilv_plugin_get_num_ports_of_class, plugin_get_num_ports_of_class)
  LILV_WRAP_FUNCTION(lilv_plugin_get_num_ports_of_class_va, plugin_get_num_ports_of_class_va)
  LILV_WRAP_FUNCTION(lilv_plugin_has_latency, plugin_has_latency)
  LILV_WRAP_FUNCTION(lilv_plugin_get_latency_port_index, plugin_get_latency_port_index)
  LILV_WRAP_FUNCTION(lilv_plugin_get_port_by_index, plugin_get_port_by_index)
  LILV_WRAP_FUNCTION(lilv_plugin_get_port_by_symbol, plugin_get_port_by_symbol)
  LILV_WRAP_FUNCTION(lilv_plugin_get_port_by_designation, plugin_get_port_by_designation)
  LILV_WRAP_FUNCTION(lilv_plugin_get_project, plugin_get_project)
  LILV_WRAP_FUNCTION(lilv_plugin_get_author_name, plugin_get_author_name)
  LILV_WRAP_FUNCTION(lilv_plugin_get_author_email, plugin_get_author_email)
  LILV_WRAP_FUNCTION(lilv_plugin_get_author_homepage, plugin_get_author_homepage)
  LILV_WRAP_FUNCTION(lilv_plugin_is_replaced, plugin_is_replaced)
  LILV_WRAP_FUNCTION(lilv_plugin_write_description, plugin_write_description)
  LILV_WRAP_FUNCTION(lilv_plugin_write_manifest_entry, plugin_write_manifest_entry)
  LILV_WRAP_FUNCTION(lilv_plugin_get_related, plugin_get_related)
  LILV_WRAP_FUNCTION(lilv_port_get_node, port_get_node)
  LILV_WRAP_FUNCTION(lilv_port_get_value, port_get_value)
  LILV_WRAP_FUNCTION(lilv_port_get, port_get)
  LILV_WRAP_FUNCTION(lilv_port_get_properties, port_get_properties)
  LILV_WRAP_FUNCTION(lilv_port_has_property, port_has_property)
  LILV_WRAP_FUNCTION(lilv_port_supports_event, port_supports_event)
  LILV_WRAP_FUNCTION(lilv_port_get_index, port_get_index)
  LILV_WRAP_FUNCTION(lilv_port_get_symbol, port_get_symbol)
  LILV_WRAP_FUNCTION(lilv_port_get_name, port_get_name)
  LILV_WRAP_FUNCTION(lilv_port_get_classes, port_get_classes)
  LILV_WRAP_FUNCTION(lilv_port_is_a, port_is_a)
  LILV_WRAP_FUNCTION(lilv_port_get_range, port_get_range)
  LILV_WRAP_FUNCTION(lilv_port_get_scale_points, port_get_scale_points)
  LILV_WRAP_FUNCTION(lilv_state_new_from_world, state_new_from_world)
  LILV_WRAP_FUNCTION(lilv_state_new_from_file, state_new_from_file)
  LILV_WRAP_FUNCTION(lilv_state_new_from_string, state_new_from_string)
  LILV_WRAP_FUNCTION(lilv_state_new_from_instance, state_new_from_instance)
  LILV_WRAP_FUNCTION(lilv_state_free, state_free)
  LILV_WRAP_FUNCTION(lilv_state_equals, state_equals)
  LILV_WRAP_FUNCTION(lilv_state_get_num_properties, state_get_num_properties)
  LILV_WRAP_FUNCTION(lilv_state_get_plugin_uri, state_get_plugin_uri)
  LILV_WRAP_FUNCTION(lilv_state_get_uri, state_get_uri)
  LILV_WRAP_FUNCTION(lilv_state_get_label, state_get_label)
  LILV_WRAP_FUNCTION(lilv_state_set_label, state_set_label)
  LILV_WRAP_FUNCTION(lilv_state_set_metadata, state_set_metadata)
  LILV_WRAP_FUNCTION(lilv_state_emit_port_values, state_emit_port_values)
  LILV_WRAP_FUNCTION(lilv_state_restore, state_restore)
  LILV_WRAP_FUNCTION(lilv_state_save, state_save)
  LILV_WRAP_FUNCTION(lilv_state_to_string, state_to_string)
  LILV_WRAP_FUNCTION(lilv_state_delete, state_delete)
  LILV_WRAP_FUNCTION(lilv_scale_point_get_label, scale_point_get_label)
  LILV_WRAP_FUNCTION(lilv_scale_point_get_value, scale_point_get_value)
  LILV_WRAP_FUNCTION(lilv_plugin_class_get_parent_uri, plugin_class_get_parent_uri)
  LILV_WRAP_FUNCTION(lilv_plugin_class_get_uri, plugin_class_get_uri)
  LILV_WRAP_FUNCTION(lilv_plugin_class_get_label, plugin_class_get_label)
  LILV_WRAP_FUNCTION(lilv_plugin_class_get_children, plugin_class_get_children)
  LILV_WRAP_FUNCTION(lilv_plugin_instantiate, plugin_instantiate)
  LILV_WRAP_FUNCTION(lilv_instance_free, instance_free)
  LILV_WRAP_FUNCTION(lilv_instance_get_uri, instance_get_uri)
  LILV_WRAP_FUNCTION(lilv_instance_connect_port, instance_connect_port)
  LILV_WRAP_FUNCTION(lilv_instance_activate, instance_activate)
  LILV_WRAP_FUNCTION(lilv_instance_run, instance_run)
  LILV_WRAP_FUNCTION(lilv_instance_deactivate, instance_deactivate)
  LILV_WRAP_FUNCTION(lilv_instance_get_extension_data, instance_get_extension_data)
  LILV_WRAP_FUNCTION(lilv_instance_get_descriptor, instance_get_descriptor)
  LILV_WRAP_FUNCTION(lilv_instance_get_handle, instance_get_handle)
  LILV_WRAP_FUNCTION(lilv_plugin_get_uis, plugin_get_uis)
  LILV_WRAP_FUNCTION(lilv_ui_get_uri, ui_get_uri)
  LILV_WRAP_FUNCTION(lilv_ui_get_classes, ui_get_classes)
  LILV_WRAP_FUNCTION(lilv_ui_is_a, ui_is_a)
  LILV_WRAP_FUNCTION(lilv_ui_is_supported, ui_is_supported)
  LILV_WRAP_FUNCTION(lilv_ui_get_bundle_uri, ui_get_bundle_uri)
  LILV_WRAP_FUNCTION(lilv_ui_get_binary_uri, ui_get_binary_uri)


private:
  dynalizer::library m_lib;
};

#undef LILV_WRAP_FUNCTION
#undef LILV_WRAP_INIT
